import pygame # импортирует библиотеку Pygame, которая позволяет создавать графические приложения.

pygame.init() #Этот вызов инициализирует Pygame,подготавливая его к использованию.Все функции Pygame требуют предварительной инициализации.

WIDTH = 800 # Здесь определяются ширина и высота окна в пикселях.
HEIGHT = 600
WHITE = (255, 255, 255) #Эти строки создают цветовые константы для использования в приложении.В данном случае, белый и красный цвета.
RED = (255, 0, 0)

FPS = 60 #Это константа, определяющая количество кадров в секунду для анимации.скорость движения круга на экране

screen = pygame.display.set_mode((WIDTH, HEIGHT)) # Эта строка создает окно приложения заданного размера. "Создай окно для нашего приложения такого размера, как указано в переменных WIDTH и HEIGHT"
pygame.display.set_caption("CIRCLE") # Этот метод устанавливает заголовок окна. мы устанавливаем заголовок "CIRCLE", чтобы он отображался в верхней части окна нашего приложения. Это помогает пользователю понять, о чем именно это приложение.


finished = False #Переменная finished используется для управления основным циклом программы. Когда она становится True, программа завершает свою работу.

x, y = WIDTH // 2, HEIGHT // 2 #Эти строки инициализируют начальные координаты центра круга в середине окна.координата x будет равна половине ширины окна, то есть круг будет расположен горизонтально посередине окна.
radius = 25 #Задается радиус круга.
clock = pygame.time.Clock() #Этот объект Clock из модуля pygame.time используется для контроля скорости выполнения программы.С помощью Clock мы можем установить желаемую скорость обновления экрана (или кадров в секунду) с помощью метода tick(). Например, clock.tick(60) означает, что программа должна стремиться к выполнению 60 итераций (или обновлений) в секунду.

while not finished: #Этот цикл будет выполняться до тех пор, пока переменная finished не станет True.
    clock.tick(FPS) #Этот метод вызывается для ограничения скорости цикла до заданного значения FPS.

#Эта часть кода проверяет все события, которые происходят в программе. Когда происходит событие "закрытие окна" (event.type == pygame.QUIT), программа присваивает переменной finished значение True, что означает, что программа должна завершить свою работу и выйти из основного цикла.
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            finished = True

    keydowns = pygame.key.get_pressed()  #Этот метод получает состояние всех клавиш на клавиатуре.Когда вы вызываете этот метод, он возвращает массив, где каждый элемент представляет клавишу на клавиатуре, а значение этого элемента указывает, нажата ли клавиша или нет. Если клавиша нажата, соответствующий элемент массива будет равен 1, в противном случае он будет равен 0.
#Этот блок кода обрабатывает нажатие стрелочных клавиш клавиатуры. 
#Если нажата клавиша вверх, координата y уменьшается на 20, если вниз - увеличивается, если влево - уменьшается x, если вправо - увеличивается.
    if keydowns[pygame.K_UP] and y - radius > 0:
        y += -20
    elif keydowns[pygame.K_DOWN] and y + radius < HEIGHT:
        y += 20
    elif keydowns[pygame.K_LEFT] and x - radius > 0:
        x += -20
    elif keydowns[pygame.K_RIGHT] and x + radius < WIDTH:
        x += 20

    screen.fill(WHITE) #Этот вызов заполняет экран белым цветом.
    pygame.draw.circle(screen, RED, (x, y), radius) #Этот метод рисует круг на экране заданным цветом и координатами центра.
    
    pygame.display.flip()
pygame.quit() #Этот метод завершает работу Pygame после выхода из цикла while.